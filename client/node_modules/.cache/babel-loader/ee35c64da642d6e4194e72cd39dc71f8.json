{"ast":null,"code":"import request from 'superagent';\nexport var PLAYLISTS_FETCHED = 'PLAYLISTS_FETCHED';\nexport var PLAYLIST_FETCHED = 'PLAYLIST_FETCHED';\nexport var PLAYLIST_CREATE_SUCCESS = 'PLAYLIST_CREATE_SUCCESS';\nexport var PLAYLIST_DELETE_SUCCESS = 'PLAYLIST_DELETE_SUCCESS';\nvar baseUrl = 'http://localhost:5000';\n\nvar playlistsFetched = function playlistsFetched(playlists) {\n  return {\n    type: PLAYLISTS_FETCHED,\n    playlists: playlists\n  };\n};\n\nvar playlistFetched = function playlistFetched(playlist) {\n  return {\n    type: PLAYLIST_FETCHED,\n    playlist: playlist\n  };\n};\n\nvar PlaylistCreateSuccess = function PlaylistCreateSuccess(playlists) {\n  return {\n    type: PLAYLIST_CREATE_SUCCESS,\n    playlists: playlists\n  };\n};\n\nvar PlaylistDeleteSuccess = function PlaylistDeleteSuccess(playlists) {\n  return {\n    type: PLAYLIST_DELETE_SUCCESS,\n    playlists: playlists\n  };\n};\n\nexport var loadPlaylists = function loadPlaylists() {\n  return function (dispatch, getState) {\n    if (getState().playlists) return;\n    request(\"\".concat(baseUrl, \"/playlists\")).then(function (response) {\n      dispatch(playlistsFetched(response.body));\n    }).catch(console.error);\n  };\n};\nexport var loadPlaylist = function loadPlaylist(id) {\n  return function (dispatch, getState) {\n    var state = getState().playlist;\n    if (state && state.id === id) return;\n    request(\"\".concat(baseUrl, \"/playlists/\").concat(id)).then(function (response) {\n      dispatch(playlistFetched(response.body));\n    }).catch(console.error);\n  };\n};\nexport var createPlaylist = function createPlaylist(data) {\n  return function (dispatch) {\n    console.log('action');\n    request.post(\"\".concat(baseUrl, \"/playlists\")).send(data).then(function (response) {\n      console.log(response.body);\n      dispatch(PlaylistCreateSuccess(response.body));\n    }).catch(console.error);\n  };\n};","map":{"version":3,"sources":["/home/ser/Documents/Codaisseur/class-22/homework/postgres-api/client/src/actions/playlists.js"],"names":["request","PLAYLISTS_FETCHED","PLAYLIST_FETCHED","PLAYLIST_CREATE_SUCCESS","PLAYLIST_DELETE_SUCCESS","baseUrl","playlistsFetched","playlists","type","playlistFetched","playlist","PlaylistCreateSuccess","PlaylistDeleteSuccess","loadPlaylists","dispatch","getState","then","response","body","catch","console","error","loadPlaylist","id","state","createPlaylist","data","log","post","send"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;AAEA,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;AAEP,IAAMC,OAAO,GAAG,uBAAhB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,SAAS;AAAA,SAAK;AACrCC,IAAAA,IAAI,EAAEP,iBAD+B;AAErCM,IAAAA,SAAS,EAATA;AAFqC,GAAL;AAAA,CAAlC;;AAKA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,QAAQ;AAAA,SAAK;AACnCF,IAAAA,IAAI,EAAEN,gBAD6B;AAEnCQ,IAAAA,QAAQ,EAARA;AAFmC,GAAL;AAAA,CAAhC;;AAKA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAJ,SAAS;AAAA,SAAK;AAC1CC,IAAAA,IAAI,EAAEL,uBADoC;AAE1CI,IAAAA,SAAS,EAATA;AAF0C,GAAL;AAAA,CAAvC;;AAKA,IAAMK,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAL,SAAS;AAAA,SAAK;AAC1CC,IAAAA,IAAI,EAAEJ,uBADoC;AAE1CG,IAAAA,SAAS,EAATA;AAF0C,GAAL;AAAA,CAAvC;;AAKA,OAAO,IAAMM,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACzD,QAAIA,QAAQ,GAAGR,SAAf,EAA0B;AAE1BP,IAAAA,OAAO,WAAIK,OAAJ,gBAAP,CACGW,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChBH,MAAAA,QAAQ,CAACR,gBAAgB,CAACW,QAAQ,CAACC,IAAV,CAAjB,CAAR;AACD,KAHH,EAIGC,KAJH,CAISC,OAAO,CAACC,KAJjB;AAKD,GAR4B;AAAA,CAAtB;AAUP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,EAAD;AAAA,SAAQ,UAACT,QAAD,EAAWC,QAAX,EAAwB;AAC1D,QAAMS,KAAK,GAAGT,QAAQ,GAAGL,QAAzB;AACA,QAAIc,KAAK,IAAIA,KAAK,CAACD,EAAN,KAAaA,EAA1B,EAA8B;AAE9BvB,IAAAA,OAAO,WAAIK,OAAJ,wBAAyBkB,EAAzB,EAAP,CACGP,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChBH,MAAAA,QAAQ,CAACL,eAAe,CAACQ,QAAQ,CAACC,IAAV,CAAhB,CAAR;AACD,KAHH,EAIGC,KAJH,CAISC,OAAO,CAACC,KAJjB;AAKD,GAT2B;AAAA,CAArB;AAWP,OAAO,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD;AAAA,SAAU,UAAAZ,QAAQ,EAAI;AAClDM,IAAAA,OAAO,CAACO,GAAR,CAAY,QAAZ;AACA3B,IAAAA,OAAO,CACJ4B,IADH,WACWvB,OADX,iBAEGwB,IAFH,CAEQH,IAFR,EAGGV,IAHH,CAGQ,UAAAC,QAAQ,EAAI;AAChBG,MAAAA,OAAO,CAACO,GAAR,CAAYV,QAAQ,CAACC,IAArB;AACAJ,MAAAA,QAAQ,CAACH,qBAAqB,CAACM,QAAQ,CAACC,IAAV,CAAtB,CAAR;AACD,KANH,EAOGC,KAPH,CAOSC,OAAO,CAACC,KAPjB;AAQD,GAV6B;AAAA,CAAvB","sourcesContent":["import request from 'superagent'\n\nexport const PLAYLISTS_FETCHED = 'PLAYLISTS_FETCHED'\nexport const PLAYLIST_FETCHED = 'PLAYLIST_FETCHED'\nexport const PLAYLIST_CREATE_SUCCESS = 'PLAYLIST_CREATE_SUCCESS'\nexport const PLAYLIST_DELETE_SUCCESS = 'PLAYLIST_DELETE_SUCCESS'\n\nconst baseUrl = 'http://localhost:5000'\n\nconst playlistsFetched = playlists => ({\n  type: PLAYLISTS_FETCHED,\n  playlists\n})\n\nconst playlistFetched = playlist => ({\n  type: PLAYLIST_FETCHED,\n  playlist\n})\n\nconst PlaylistCreateSuccess = playlists => ({\n  type: PLAYLIST_CREATE_SUCCESS,\n  playlists\n})\n\nconst PlaylistDeleteSuccess = playlists => ({\n  type: PLAYLIST_DELETE_SUCCESS,\n  playlists\n})\n\nexport const loadPlaylists = () => (dispatch, getState) => {\n  if (getState().playlists) return\n\n  request(`${baseUrl}/playlists`)\n    .then(response => {\n      dispatch(playlistsFetched(response.body))\n    })\n    .catch(console.error)\n}\n\nexport const loadPlaylist = (id) => (dispatch, getState) => {\n  const state = getState().playlist\n  if (state && state.id === id) return\n  \n  request(`${baseUrl}/playlists/${id}`)\n    .then(response => {\n      dispatch(playlistFetched(response.body))\n    })\n    .catch(console.error)\n}\n\nexport const createPlaylist = (data) => dispatch => {\n  console.log('action')\n  request\n    .post(`${baseUrl}/playlists`)\n    .send(data)\n    .then(response => {\n      console.log(response.body)\n      dispatch(PlaylistCreateSuccess(response.body))\n    })\n    .catch(console.error)\n}\n\n"]},"metadata":{},"sourceType":"module"}